# ;; -*- mode: org; fill-column: 64; -*-
#+title: Homework Assignment No. 03 : ARITHMETIC Language

* The Assignment is about implementing the ARITHMETIC Language

In this assignment you will be implementing an interpreter
for the ARITHMETIC Language, a language of arithmetic
expressions. 

The language consists of the following:

 - 1. Concrete syntax ::  for programs in the arithmetic
      language.  Specified as a  CFG.  *Given*

 - 2. Abstract syntax ::  for programs in the arithmetic
      language.  Specified using a =define-datatype=.
      *Given*.

 - 3. Parser :: converts concrete syntax to abstract
                syntax.  *To be implemented by you*.

 - 4. Expressible values :: a definition of domain of values
      expressed, or returned as a result of evaluation.
      *Given*.

 - 5. Interpreter Error Domain :: Divide by zero error, and type
      errors.  *Given*.

 - 6. Interpreter :: A program that maps abstract syntax to
                     expressible values.  *To be implemented
                     by you*


* Concrete Syntax of ARITHMETIC

  The concrete syntax of ARITHMETIC programs is given below:

#+BEGIN_EXAMPLE
  <exp> := <number>
       |   <boolean>
       |   (if <exp> <exp> <exp>)  ; (if <test> <then> <else>)
       |   (<binop> <exp> <exp>)
	
  <binop> := + | - | * | / | < | ==

#+END_EXAMPLE


* Abstract Syntax of ARITHMETIC


** define-datatype (Given)
#+NAME: define-ast
#+BEGIN_SRC racket
(define-datatype ast ast?
 [binop (op binop?) (rand1 ast?) (rand2 ast?)]
 [ifte (c ast?) (t ast?) (e ast?)]
 [num (n number?)]
 [bool (b boolean?)])
#+END_SRC

 1. =define-datatype= auto-defines the following constructors
    (their signatures are shown for clarity):

    1. =binop= :: [binop? ast? ast?] -> ast?
    2. =ifte=  :: [ast? ast? ast?]   -> ast?
    3. =num=   :: number? -> ast?
    4. =bool=  :: boolean? -> ast?

** binop? :: symbol? -> boolean? (Given)
  =(binop? op)= checks if =op= one of the legal binary
  operators. 

#+NAME: binop
#+BEGIN_SRC racket
  (define binop?
    (lambda (x)
      (match x
        ['add #t]
        ['sub #t]
        ['mul #t]
        ['div #t]
        ['lt? #t]
        ['eq? #t]
        [_ #f])))
#+END_SRC

In the example below, ='foobar= is not a binary operator.
Therefore the binop constructor will reject it as an
argument.
#+BEGIN_SRC racket 
(check-exn exn:fail (lambda () (binop 'foobar (num 10) (num 20))))
#+END_SRC


* Parser (You need to implement this)

A parser parses an expression in concrete syntax according
to a given grammar.  

** Parse Error (Given)
If the expression is not grammatical legal, the parser raises an
exception.  Exceptions in Racket are structures.  Specialised
exceptions like =exn:parse-error= are built by inheriting from
the base exception =exn:fail=. 
#+NAME: exn
#+BEGIN_SRC racket
(struct exn:parse-error exn:fail ())
#+END_SRC

The function =raise-parse-error=, given below raises an
=exn:parse-err= exception when invoked.

#+NAME: parser
#+BEGIN_SRC racket
(define raise-parse-error 
 (lambda (err-msg)
   (raise (exn:parse-error err-msg (current-continuation-marks)))))
#+END_SRC

You need to complete this definition.

#+NAME: parse
#+BEGIN_SRC racket
;;; parse :: any/c -> ast?  Raises exception exn:parse-error?
;;; Fill in the function parse here
(define (parse exp)
  ;; complete the definition
  )
#+END_SRC


** Test for Parsing
#+NAME: parsing-test
#+BEGIN_SRC racket
;;; Tests for parsing
(define ts-parsing
  (test-suite "parsing"
              (test-case "num" (check-equal? (parse 10) (num 10)))
              (test-case "add" (check-equal? (parse '(+ 10 20)) (binop 'add (num 10) (num 20))))
              (test-case "sub" (check-equal? (parse '(- 10 20)) (binop 'sub (num 10) (num 20))))
              (test-case "mul" (check-equal? (parse '(* 10 20)) (binop 'mul (num 10) (num 20))))
              (test-case "div" (check-equal? (parse '(/ 10 20)) (binop 'div (num 10) (num 20))))
              (test-case "bool-t" (check-equal? (parse #t) (bool #t)))
              (test-case "bool-f" (check-equal? (parse #f) (bool #f)))
              (test-case "if" (check-equal? (parse '(if #t 10 20)) (ifte (bool #t) (num 10) (num 20))))
              (test-case "failure"
                (check-exn exn:parse-error?
                           (lambda () (parse '(** 10 20)))))
              (test-case "recur" (check-equal?
                                  (parse '(+ (- 10 20) (* 20 30)))
                                  (binop 'add
                                             (binop 'sub (num 10) (num 20))
                                             (binop 'mul (num 20) (num 30)))))
              ))
#+END_SRC




* Expressible Values

Expressible values are those that are returned as the result of
evaluating an expression.  For the ARITHMETIC language,
expressible values are numbers and booleans. 

#+NAME expressible
#+BEGIN_SRC racket
(require racket/contract)
(define expressible-value? (or/c number? boolean?))
#+END_SRC


* Error domain
The interpreter receives an AST, and produces a number, boolean,
or throws an error.  We first define the types of errors it can
throw.

** Errors raised by the interpreter
Like before, errors are specialised exceptions.  We are
concerned with two kinds of exceptions raised during evaluation,
or execution time: divide-by-zero and type-error.

=exec-divide-by-zero= is raised when the numerator of a division is
zero.  =exec-type-error= is raised when there is an argument type
mismatch, e.g., a non-boolean value to the test of a
conditional, or a boolean argument to addition, etc.

#+NAME: interpreter
#+BEGIN_SRC racket
  (struct exn:exec-div-by-zero exn:fail ())
  (define raise-exec-div-by-zero
    (lambda ()
      (raise (exn:exec-div-by-zero "div-by-0!" (current-continuation-marks)))))

  (struct exn:exec-type-mismatch exn:fail ())
  (define raise-exec-type-mismatch
    (lambda ()
      (raise (exn:exec-type-mismatch "type mismatch!" (current-continuation-marks)))))
#+END_SRC

These errors are raised as follows:
  - =(raise-exec-div-by-zero)=
  - =(raise-exec-type-mismatch)=

Your interpreter will be expected to raise the above exceptions
under the appropriate conditions.

** Runtime checks for types
The functions =typecheck-num=, =typecheck-bool= and
=check-non-zero= defined below check whether a value has the
right type and raise the appropriate runtime evaluator
exceptions.

#+NAME: runtime-check-helpers
#+BEGIN_SRC racket
;;; runtime-check :: [expressible? -> boolean?], exn? -> [expressible? -> expressible? || exn?] 
(define runtime-check
  (lambda (pred? exn)
    (lambda (v)
      (if (pred? v)
          v
          (exn)))))

(define typecheck-num
  (runtime-check number?  raise-exec-type-mismatch))

(define typecheck-bool 
  (runtime-check boolean? raise-exec-type-mismatch))

(define check-non-zero
  (runtime-check (not/c zero?) raise-exec-div-by-zero))
#+END_SRC


* Interpreter 
** Mapping operators to operations

This function below maps the operators to their interpretation,
i.e., actual functions that operate on expressible values.
#+NAME: binop-helper
#+BEGIN_SRC racket
(define op-interpretation
  (lambda (op)
    (match op
      ['add +]
      ['sub -]
      ['mul *]
      ['lt? <]
      ['eq? =]
      [_ error 'op-interpretation "unknown op"])))
#+END_SRC

** =eval-ast= (You need to implement this)
#+NAME: eval-ast
#+BEGIN_SRC racket
;;; eval-ast :: ast? -> expressible? || (or/c exn:exec-div-by-zero  exn:exec-type-mismatch)
(define eval-ast
  (lambda (a)
    ;; your solution here
    ))
#+END_SRC

** Testing =eval-ast=

*** Routine test cases
#+NAME: eval-ast-test
#+BEGIN_SRC racket
(define ts-evaluation
  (test-suite
    "evaluation"
    (test-case "num" (check-equal? (eval-ast (num 10)) 10))
    (test-case "add" (check-equal? (eval-ast (binop 'add (num 10) (num 20))) 30))
    (test-case "sub" (check-equal? (eval-ast (binop 'sub (num 10) (num 20))) -10))
    (test-case "mul" (check-equal? (eval-ast (binop 'mul (num 10) (num 20))) 200))
    (test-case "lt" (check-equal? (eval-ast (binop 'lt? (num 10) (num 20))) #t))
    (test-case "eq" (check-equal? (eval-ast (binop 'eq? (num 10) (num 10))) #t))
    (test-case "div-success" (check-equal? (eval-ast (binop 'div (num 20) (num 10))) 2))
    ;; raise an exception, so use the correct `raise' function!
    (test-case "div-failure"
               (check-exn exn:exec-div-by-zero?
                          (lambda () (eval-ast (binop 'div (num 20) (num 0))) 2)))
    (test-case "bool-t" (check-equal? (eval-ast (bool #t)) #t))
    (test-case "bool-f" (check-equal? (eval-ast (bool #f)) #f))
    (test-case "if-true" (check-equal? (eval-ast (ifte (bool #t) (num 10) (num 20))) 10))
    (test-case "if-false" (check-equal? (eval-ast (ifte (bool #f) (num 10) (num 20))) 20))
    (test-case "if-type-mismatch"  (check-exn exn:exec-type-mismatch?
               (lambda () (eval-ast (ifte (num 42) (num 10) (num 20))))))))
#+END_SRC

*** Testing Incorrect rand1 type
#+NAME: rand1
#+BEGIN_SRC racket
(define ts-numop-incorrect-param-rand1
  (test-suite 
   "wrongly typed rand1 parameters"
   (for/list ([numerical-op '(add sub mul div lt? eq?)])
     (test-case (string-append (symbol->string numerical-op) "-type-mismatch-rand1")
       (check-exn exn:exec-type-mismatch?
                  (lambda () 
                    (eval-ast (binop numerical-op
                                     (binop 'lt? (num 10) (num 20)) ; boolean
                                     (num 10)))))))))

#+END_SRC

*** Testing Incorrect rand2 type
#+NAME:rand2
#+BEGIN_SRC racket
(define ts-numop-incorrect-param-rand2
  (test-suite
   "wrongly typed rand2 parameters"
   (for/list ([numerical-op '(add sub mul div)])
     (test-case (string-append (symbol->string numerical-op) "-type-mismatch-rand1")
       (check-exn exn:exec-type-mismatch?
                  (lambda () 
                    (eval-ast (binop numerical-op (num 10)
                                     (binop 'lt? (num 10) (num 20))))))))))
#+end_src


* Test Runners

  These run the tests that have been written in this file.  When
  submitting, please ensure that all these tests pass.

#+NAME: test-runners
#+BEGIN_SRC racket
  (define run-all-tests 
    (lambda ()
      (run-tests ts-parsing)
      (run-tests ts-evaluation)
      (run-tests ts-numop-incorrect-param-rand1)
      (run-tests ts-numop-incorrect-param-rand2)))
#+END_SRC


* Running the test suite

  We will use [[https://docs.racket-lang.org/raco/index.html][raco]] command line utility to run the tests.

  =raco test test.rkt= will run the test suite.

#+NAME: run-test
#+BEGIN_SRC racket
  (module+ test
    (run-all-tests))
#+END_SRC


* Tangle

#+BEGIN_SRC racket :noweb yes :tangle ./main.rkt
#lang racket
(require eopl)
(require rackunit)
(require racket/match)
(provide (all-defined-out))


<<define-ast>>
<<binop>>
<<exn>>
<<parser>>
<<parse>>
<<expressible>>
<<interpreter>>
<<runtime-check-helpers>>
<<binop-helper>>
<<eval-ast>>
<<rand1>>
<<rand2>>
#+END_SRC


#+BEGIN_SRC racket :noweb yes :tangle ./test.rkt
#lang racket
(require eopl)
(require rackunit)
(require racket/match)
(require rackunit/text-ui)
(require "main.rkt")

<<parsing-test>>
<<eval-ast-test>>
<<test-runners>>
<<run-test>>
#+END_SRC
